;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2018-08-31
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 unsigned char status;
; 0000 0025 char data;
; 0000 0026 while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0000 0027       {
; 0000 0028       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0029       data=UDR1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002A       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002B          return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002D }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 0033 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0034 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0035 UDR1=c;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0036 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;#pragma used-
;
;
;
;#include <mega128.h>
;#include <delay.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0043 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0044 // Place your code here
; 0000 0045 
; 0000 0046 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 004B {
;PCODE: $00000039 VOL: 0
; 0000 004C char spr1,spr2,spr3,spr4,spr5,spr6,spr7,spr8;
; 0000 004D 
; 0000 004E 
; 0000 004F // Declare your local variables here
; 0000 0050 
; 0000 0051 // Input/Output Ports initialization
; 0000 0052 // Port A initialization
; 0000 0053 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0054 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0055 PORTA=0x00;
;PCODE: $0000003A VOL: 0
;	spr1 -> R17
;	spr2 -> R16
;	spr3 -> R19
;	spr4 -> R18
;	spr5 -> R21
;	spr6 -> R20
;	spr7 -> Y+1
;	spr8 -> Y+0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0056 DDRA=0xFF;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0057 
; 0000 0058 // Port B initialization
; 0000 0059 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 005A // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 005B PORTB=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005C DDRB=0xFF;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005D 
; 0000 005E // Port C initialization
; 0000 005F // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0060 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0061 PORTC=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0062 DDRC=0xFF;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0063 
; 0000 0064 // Port D initialization
; 0000 0065 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0066 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0067 PORTD=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0068 DDRD=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0069 
; 0000 006A // Port E initialization
; 0000 006B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006D PORTE=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006E DDRE=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006F 
; 0000 0070 // Port F initialization
; 0000 0071 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0072 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0073 PORTF=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0074 DDRF=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0075 
; 0000 0076 // Port G initialization
; 0000 0077 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0078 // State4=T State3=T State2=T State1=T State0=T
; 0000 0079 PORTG=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007A DDRG=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 007B 
; 0000 007C // Timer/Counter 0 initialization
; 0000 007D // Clock source: System Clock
; 0000 007E // Clock value: 125,000 kHz
; 0000 007F // Mode: Normal top=0xFF
; 0000 0080 // OC0 output: Disconnected
; 0000 0081 ASSR=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0082 TCCR0=0x05;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0083 TCNT0=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0084 OCR0=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: Timer1 Stopped
; 0000 0089 // Mode: Normal top=0xFFFF
; 0000 008A // OC1A output: Discon.
; 0000 008B // OC1B output: Discon.
; 0000 008C // OC1C output: Discon.
; 0000 008D // Noise Canceler: Off
; 0000 008E // Input Capture on Falling Edge
; 0000 008F // Timer1 Overflow Interrupt: Off
; 0000 0090 // Input Capture Interrupt: Off
; 0000 0091 // Compare A Match Interrupt: Off
; 0000 0092 // Compare B Match Interrupt: Off
; 0000 0093 // Compare C Match Interrupt: Off
; 0000 0094 TCCR1A=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0095 TCCR1B=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0096 TCNT1H=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0097 TCNT1L=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0098 ICR1H=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0099 ICR1L=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009A OCR1AH=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009B OCR1AL=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009C OCR1BH=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009D OCR1BL=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009E OCR1CH=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009F OCR1CL=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A0 
; 0000 00A1 // Timer/Counter 2 initialization
; 0000 00A2 // Clock source: System Clock
; 0000 00A3 // Clock value: Timer2 Stopped
; 0000 00A4 // Mode: Normal top=0xFF
; 0000 00A5 // OC2 output: Disconnected
; 0000 00A6 TCCR2=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A7 TCNT2=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A8 OCR2=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A9 
; 0000 00AA // Timer/Counter 3 initialization
; 0000 00AB // Clock source: System Clock
; 0000 00AC // Clock value: Timer3 Stopped
; 0000 00AD // Mode: Normal top=0xFFFF
; 0000 00AE // OC3A output: Discon.
; 0000 00AF // OC3B output: Discon.
; 0000 00B0 // OC3C output: Discon.
; 0000 00B1 // Noise Canceler: Off
; 0000 00B2 // Input Capture on Falling Edge
; 0000 00B3 // Timer3 Overflow Interrupt: Off
; 0000 00B4 // Input Capture Interrupt: Off
; 0000 00B5 // Compare A Match Interrupt: Off
; 0000 00B6 // Compare B Match Interrupt: Off
; 0000 00B7 // Compare C Match Interrupt: Off
; 0000 00B8 TCCR3A=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00B9 TCCR3B=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00BA TCNT3H=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00BB TCNT3L=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00BC ICR3H=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00BD ICR3L=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00BE OCR3AH=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00BF OCR3AL=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C0 OCR3BH=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00C1 OCR3BL=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00C2 OCR3CH=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C3 OCR3CL=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00C4 
; 0000 00C5 // External Interrupt(s) initialization
; 0000 00C6 // INT0: Off
; 0000 00C7 // INT1: Off
; 0000 00C8 // INT2: Off
; 0000 00C9 // INT3: Off
; 0000 00CA // INT4: Off
; 0000 00CB // INT5: Off
; 0000 00CC // INT6: Off
; 0000 00CD // INT7: Off
; 0000 00CE EICRA=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00CF EICRB=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00D0 EIMSK=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00D1 
; 0000 00D2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00D3 TIMSK=0x01;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D4 
; 0000 00D5 ETIMSK=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D6 
; 0000 00D7 
; 0000 00D8 // USART0 initialization
; 0000 00D9 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00DA // USART0 Receiver: On
; 0000 00DB // USART0 Transmitter: On
; 0000 00DC // USART0 Mode: Asynchronous
; 0000 00DD // USART0 Baud Rate: 115200
; 0000 00DE UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00DF UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00E0 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00E1 UBRR0H=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00E2 UBRR0L=0x08;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E3 
; 0000 00E4 // USART1 initialization
; 0000 00E5 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00E6 // USART1 Receiver: On
; 0000 00E7 // USART1 Transmitter: On
; 0000 00E8 // USART1 Mode: Asynchronous
; 0000 00E9 // USART1 Baud Rate: 9600
; 0000 00EA UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00EB UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00EC UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00ED UBRR1H=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00EE UBRR1L=0x67;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00EF 
; 0000 00F0 // Analog Comparator initialization
; 0000 00F1 // Analog Comparator: Off
; 0000 00F2 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F3 ACSR=0x80;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00F4 SFIOR=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00F5 
; 0000 00F6 // ADC initialization
; 0000 00F7 // ADC disabled
; 0000 00F8 ADCSRA=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F9 
; 0000 00FA // SPI initialization
; 0000 00FB // SPI disabled
; 0000 00FC SPCR=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00FD 
; 0000 00FE // TWI initialization
; 0000 00FF // TWI disabled
; 0000 0100 TWCR=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0101 
; 0000 0102 // Global enable interrupts
; 0000 0103 #asm("sei")
;PCODE: $000000BD VOL: 0
	sei
;PCODE: $000000BE VOL: 0
; 0000 0104 
; 0000 0105 
; 0000 0106 //delay_ms(8000); //bo panel sie inicjalizuje
; 0000 0107 //delay_ms(2000); //bo panel sie inicjalizuje
; 0000 0108 delay_ms(2000); //bo panel sie inicjalizuje
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0109 delay_ms(2000); //bo panel sie inicjalizuje
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 010A 
; 0000 010B 
; 0000 010C putchar(90);  //5A
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 010D putchar(165); //A5
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 010E putchar(3);//03  //znak dzwiekowy ze jestem
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 010F putchar(128);  //80
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0110 putchar(2);    //02
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0111 putchar(16);   //10
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0112 
; 0000 0113 
; 0000 0114 while (1)
;PCODE: $000000D7 VOL: 0
; 0000 0115       {
; 0000 0116       // Place your code here
; 0000 0117       spr1 = getchar1();
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0118       spr2 = getchar1();
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0119       spr3 = getchar1();
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 011A       spr4 = getchar1();
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 011B       spr5 = getchar1();
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 011C       spr6 = getchar1();
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 011D       spr7 = getchar1();
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 011E       spr8 = getchar1();
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 011F       spr8 = getchar1();
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0120 
; 0000 0121       putchar(90);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0122       putchar(165);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0123       putchar(10);       //ilosc liter 8 + 3, tu moze byc faza bo jade przez putchar a nie printf, moze byc wiecej znakow
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0124       putchar(130);  //82
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0125       putchar(0);    //0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0126       putchar(80);  //adres 90 - 144   , nowy adres to 50 czyli 80
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0127       putchar(spr1);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0128       putchar(spr2);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0129       putchar(spr3);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 012A       putchar(spr4);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 012B       putchar(spr5);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 012C       putchar(spr6);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 012D       putchar(spr7);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 012E       //putchar(spr8);
; 0000 012F 
; 0000 0130       delay_ms(2000);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0131 
; 0000 0132       putchar(90);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0133       putchar(165);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0134       putchar(10);       //ilosc liter 8 + 3, tu moze byc faza bo jade przez putchar a nie printf, moze byc wiecej znakow
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0135       putchar(130);  //82
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0136       putchar(0);    //0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0137       putchar(80);  //adres 90 - 144   , nowy adres to 50 czyli 80
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0138       putchar('0');
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0139       putchar('0');
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 013A       putchar('0');
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 013B       putchar('0');
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 013C       putchar('0');
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 013D       putchar('0');
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 013E       putchar('0');
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 013F 
; 0000 0140 
; 0000 0141 
; 0000 0142       }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0143 }
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
